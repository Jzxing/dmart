
83usartdmarx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f98  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800416c  0800416c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800416c  0800416c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800416c  0800416c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000022c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000238  20000238  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aed4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a69  00000000  00000000  0002af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  0002c980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e0  00000000  00000000  0002d0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fbd7  00000000  00000000  0002d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf61  00000000  00000000  0004d3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0002  00000000  00000000  00059310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00119312  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d14  00000000  00000000  00119364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004114 	.word	0x08004114

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004114 	.word	0x08004114

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa8e 	bl	80006f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f810 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8c2 	bl	8000368 <MX_GPIO_Init>
  MX_DMA_Init();
 80001e4:	f000 f89a 	bl	800031c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001e8:	f000 f868 	bl	80002bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, RxData, 10);    // 这里加这个函数，接收数据
 80001ec:	220a      	movs	r2, #10
 80001ee:	4902      	ldr	r1, [pc, #8]	; (80001f8 <main+0x24>)
 80001f0:	4802      	ldr	r0, [pc, #8]	; (80001fc <main+0x28>)
 80001f2:	f002 fdc7 	bl	8002d84 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f6:	e7fe      	b.n	80001f6 <main+0x22>
 80001f8:	20000134 	.word	0x20000134
 80001fc:	20000028 	.word	0x20000028

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b0a6      	sub	sp, #152	; 0x98
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f003 ff78 	bl	8004104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2258      	movs	r2, #88	; 0x58
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f003 ff6a 	bl	8004104 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000230:	2301      	movs	r3, #1
 8000232:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023a:	2301      	movs	r3, #1
 800023c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023e:	2302      	movs	r3, #2
 8000240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800024c:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000250:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800025e:	4618      	mov	r0, r3
 8000260:	f000 ff76 	bl	8001150 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800026a:	f000 f8d9 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000284:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 ffb4 	bl	80021f8 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000296:	f000 f8c3 	bl	8000420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800029a:	2301      	movs	r3, #1
 800029c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 f9dd 	bl	8002664 <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002b0:	f000 f8b6 	bl	8000420 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3798      	adds	r7, #152	; 0x98
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002c0:	4b14      	ldr	r3, [pc, #80]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002c2:	4a15      	ldr	r2, [pc, #84]	; (8000318 <MX_USART1_UART_Init+0x5c>)
 80002c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002e2:	220c      	movs	r2, #12
 80002e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <MX_USART1_UART_Init+0x58>)
 8000300:	f002 fbce 	bl	8002aa0 <HAL_UART_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800030a:	f000 f889 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000028 	.word	0x20000028
 8000318:	40013800 	.word	0x40013800

0800031c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <MX_DMA_Init+0x48>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	4a0f      	ldr	r2, [pc, #60]	; (8000364 <MX_DMA_Init+0x48>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6153      	str	r3, [r2, #20]
 800032e:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <MX_DMA_Init+0x48>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	2100      	movs	r1, #0
 800033e:	200e      	movs	r0, #14
 8000340:	f000 fb1b 	bl	800097a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000344:	200e      	movs	r0, #14
 8000346:	f000 fb34 	bl	80009b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	2100      	movs	r1, #0
 800034e:	200f      	movs	r0, #15
 8000350:	f000 fb13 	bl	800097a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000354:	200f      	movs	r0, #15
 8000356:	f000 fb2c 	bl	80009b2 <HAL_NVIC_EnableIRQ>

}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800036e:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_GPIO_Init+0x74>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a1a      	ldr	r2, [pc, #104]	; (80003dc <MX_GPIO_Init+0x74>)
 8000374:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000378:	6153      	str	r3, [r2, #20]
 800037a:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_GPIO_Init+0x74>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_GPIO_Init+0x74>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a14      	ldr	r2, [pc, #80]	; (80003dc <MX_GPIO_Init+0x74>)
 800038c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_GPIO_Init+0x74>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_GPIO_Init+0x74>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <MX_GPIO_Init+0x74>)
 80003a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_GPIO_Init+0x74>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_GPIO_Init+0x74>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a08      	ldr	r2, [pc, #32]	; (80003dc <MX_GPIO_Init+0x74>)
 80003bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_GPIO_Init+0x74>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003ca:	603b      	str	r3, [r7, #0]
 80003cc:	683b      	ldr	r3, [r7, #0]

}
 80003ce:	bf00      	nop
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)"text:", 5,0xffff);//轮询发送，不然可能发送不出去
 80003e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003ec:	2205      	movs	r2, #5
 80003ee:	4909      	ldr	r1, [pc, #36]	; (8000414 <HAL_UART_RxCpltCallback+0x34>)
 80003f0:	4809      	ldr	r0, [pc, #36]	; (8000418 <HAL_UART_RxCpltCallback+0x38>)
 80003f2:	f002 fba3 	bl	8002b3c <HAL_UART_Transmit>
	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)RxData, 10);//发送接受的数据
 80003f6:	220a      	movs	r2, #10
 80003f8:	4908      	ldr	r1, [pc, #32]	; (800041c <HAL_UART_RxCpltCallback+0x3c>)
 80003fa:	4807      	ldr	r0, [pc, #28]	; (8000418 <HAL_UART_RxCpltCallback+0x38>)
 80003fc:	f002 fc32 	bl	8002c64 <HAL_UART_Transmit_DMA>
    HAL_UART_Receive_DMA(&huart1, RxData, 10);    // 这里加这个函数，接收数据
 8000400:	220a      	movs	r2, #10
 8000402:	4906      	ldr	r1, [pc, #24]	; (800041c <HAL_UART_RxCpltCallback+0x3c>)
 8000404:	4804      	ldr	r0, [pc, #16]	; (8000418 <HAL_UART_RxCpltCallback+0x38>)
 8000406:	f002 fcbd 	bl	8002d84 <HAL_UART_Receive_DMA>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	0800412c 	.word	0x0800412c
 8000418:	20000028 	.word	0x20000028
 800041c:	20000134 	.word	0x20000134

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	e7fe      	b.n	8000428 <Error_Handler+0x8>
	...

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <HAL_MspInit+0x44>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <HAL_MspInit+0x44>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <HAL_MspInit+0x44>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <HAL_MspInit+0x44>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a08      	ldr	r2, [pc, #32]	; (8000470 <HAL_MspInit+0x44>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <HAL_MspInit+0x44>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000

08000474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a4f      	ldr	r2, [pc, #316]	; (80005d0 <HAL_UART_MspInit+0x15c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	f040 8098 	bne.w	80005c8 <HAL_UART_MspInit+0x154>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000498:	4b4e      	ldr	r3, [pc, #312]	; (80005d4 <HAL_UART_MspInit+0x160>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a4d      	ldr	r2, [pc, #308]	; (80005d4 <HAL_UART_MspInit+0x160>)
 800049e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b4b      	ldr	r3, [pc, #300]	; (80005d4 <HAL_UART_MspInit+0x160>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ac:	613b      	str	r3, [r7, #16]
 80004ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b0:	4b48      	ldr	r3, [pc, #288]	; (80005d4 <HAL_UART_MspInit+0x160>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a47      	ldr	r2, [pc, #284]	; (80005d4 <HAL_UART_MspInit+0x160>)
 80004b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ba:	6153      	str	r3, [r2, #20]
 80004bc:	4b45      	ldr	r3, [pc, #276]	; (80005d4 <HAL_UART_MspInit+0x160>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80004c8:	4b42      	ldr	r3, [pc, #264]	; (80005d4 <HAL_UART_MspInit+0x160>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a41      	ldr	r2, [pc, #260]	; (80005d4 <HAL_UART_MspInit+0x160>)
 80004ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d2:	6153      	str	r3, [r2, #20]
 80004d4:	4b3f      	ldr	r3, [pc, #252]	; (80005d4 <HAL_UART_MspInit+0x160>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PE1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004e0:	2310      	movs	r3, #16
 80004e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e4:	2302      	movs	r3, #2
 80004e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ec:	2303      	movs	r3, #3
 80004ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004f0:	2307      	movs	r3, #7
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	4619      	mov	r1, r3
 80004fa:	4837      	ldr	r0, [pc, #220]	; (80005d8 <HAL_UART_MspInit+0x164>)
 80004fc:	f000 fc9e 	bl	8000e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000500:	2302      	movs	r3, #2
 8000502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000504:	2302      	movs	r3, #2
 8000506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050c:	2303      	movs	r3, #3
 800050e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000510:	2307      	movs	r3, #7
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	4830      	ldr	r0, [pc, #192]	; (80005dc <HAL_UART_MspInit+0x168>)
 800051c:	f000 fc8e 	bl	8000e3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000520:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <HAL_UART_MspInit+0x16c>)
 8000522:	4a30      	ldr	r2, [pc, #192]	; (80005e4 <HAL_UART_MspInit+0x170>)
 8000524:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000526:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <HAL_UART_MspInit+0x16c>)
 8000528:	2200      	movs	r2, #0
 800052a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800052c:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <HAL_UART_MspInit+0x16c>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000532:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <HAL_UART_MspInit+0x16c>)
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000538:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <HAL_UART_MspInit+0x16c>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800053e:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <HAL_UART_MspInit+0x16c>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000544:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <HAL_UART_MspInit+0x16c>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800054a:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <HAL_UART_MspInit+0x16c>)
 800054c:	2200      	movs	r2, #0
 800054e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000550:	4823      	ldr	r0, [pc, #140]	; (80005e0 <HAL_UART_MspInit+0x16c>)
 8000552:	f000 fa48 	bl	80009e6 <HAL_DMA_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 800055c:	f7ff ff60 	bl	8000420 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <HAL_UART_MspInit+0x16c>)
 8000564:	671a      	str	r2, [r3, #112]	; 0x70
 8000566:	4a1e      	ldr	r2, [pc, #120]	; (80005e0 <HAL_UART_MspInit+0x16c>)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <HAL_UART_MspInit+0x174>)
 800056e:	4a1f      	ldr	r2, [pc, #124]	; (80005ec <HAL_UART_MspInit+0x178>)
 8000570:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000572:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <HAL_UART_MspInit+0x174>)
 8000574:	2210      	movs	r2, #16
 8000576:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <HAL_UART_MspInit+0x174>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <HAL_UART_MspInit+0x174>)
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <HAL_UART_MspInit+0x174>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <HAL_UART_MspInit+0x174>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <HAL_UART_MspInit+0x174>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <HAL_UART_MspInit+0x174>)
 8000598:	2200      	movs	r2, #0
 800059a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800059c:	4812      	ldr	r0, [pc, #72]	; (80005e8 <HAL_UART_MspInit+0x174>)
 800059e:	f000 fa22 	bl	80009e6 <HAL_DMA_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80005a8:	f7ff ff3a 	bl	8000420 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <HAL_UART_MspInit+0x174>)
 80005b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <HAL_UART_MspInit+0x174>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2025      	movs	r0, #37	; 0x25
 80005be:	f000 f9dc 	bl	800097a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005c2:	2025      	movs	r0, #37	; 0x25
 80005c4:	f000 f9f5 	bl	80009b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	; 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40013800 	.word	0x40013800
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000800 	.word	0x48000800
 80005dc:	48001000 	.word	0x48001000
 80005e0:	200000ac 	.word	0x200000ac
 80005e4:	40020058 	.word	0x40020058
 80005e8:	200000f0 	.word	0x200000f0
 80005ec:	40020044 	.word	0x40020044

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <NMI_Handler+0x4>

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <MemManage_Handler+0x4>

08000602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <BusFault_Handler+0x4>

08000608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <UsageFault_Handler+0x4>

0800060e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063c:	f000 f8a2 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <DMA1_Channel4_IRQHandler+0x10>)
 800064a:	f000 fae9 	bl	8000c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000f0 	.word	0x200000f0

08000658 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <DMA1_Channel5_IRQHandler+0x10>)
 800065e:	f000 fadf 	bl	8000c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000ac 	.word	0x200000ac

0800066c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <USART1_IRQHandler+0x10>)
 8000672:	f002 fbd5 	bl	8002e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028

08000680 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <SystemInit+0x20>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <SystemInit+0x20>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490e      	ldr	r1, [pc, #56]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0b      	ldr	r4, [pc, #44]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ce:	f7ff ffd7 	bl	8000680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006d2:	f003 fcf3 	bl	80040bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d6:	f7ff fd7d 	bl	80001d4 <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e8:	08004174 	.word	0x08004174
  ldr r2, =_sbss
 80006ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f0:	20000238 	.word	0x20000238

080006f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_2_IRQHandler>
	...

080006f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_Init+0x28>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a07      	ldr	r2, [pc, #28]	; (8000720 <HAL_Init+0x28>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000708:	2003      	movs	r0, #3
 800070a:	f000 f92b 	bl	8000964 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070e:	200f      	movs	r0, #15
 8000710:	f000 f808 	bl	8000724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000714:	f7ff fe8a 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_InitTick+0x54>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_InitTick+0x58>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	fbb3 f3f1 	udiv	r3, r3, r1
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f943 	bl	80009ce <HAL_SYSTICK_Config>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e00e      	b.n	8000770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d80a      	bhi.n	800076e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000758:	2200      	movs	r2, #0
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f000 f90b 	bl	800097a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_InitTick+0x5c>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	e000      	b.n	8000770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000000 	.word	0x20000000
 800077c:	20000008 	.word	0x20000008
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_IncTick+0x20>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_IncTick+0x24>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_IncTick+0x24>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000234 	.word	0x20000234

080007ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <HAL_GetTick+0x14>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000234 	.word	0x20000234

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db0b      	blt.n	8000852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 021f 	and.w	r2, r3, #31
 8000840:	4907      	ldr	r1, [pc, #28]	; (8000860 <__NVIC_EnableIRQ+0x38>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	095b      	lsrs	r3, r3, #5
 8000848:	2001      	movs	r0, #1
 800084a:	fa00 f202 	lsl.w	r2, r0, r2
 800084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000e100 	.word	0xe000e100

08000864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db0a      	blt.n	800088e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	490c      	ldr	r1, [pc, #48]	; (80008b0 <__NVIC_SetPriority+0x4c>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	440b      	add	r3, r1
 8000888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800088c:	e00a      	b.n	80008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <__NVIC_SetPriority+0x50>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	3b04      	subs	r3, #4
 800089c:	0112      	lsls	r2, r2, #4
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	761a      	strb	r2, [r3, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	; 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f1c3 0307 	rsb	r3, r3, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3304      	adds	r3, #4
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d902      	bls.n	80008e8 <NVIC_EncodePriority+0x30>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3b03      	subs	r3, #3
 80008e6:	e000      	b.n	80008ea <NVIC_EncodePriority+0x32>
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	401a      	ands	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43d9      	mvns	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	4313      	orrs	r3, r2
         );
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	; 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000930:	d301      	bcc.n	8000936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000932:	2301      	movs	r3, #1
 8000934:	e00f      	b.n	8000956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <SysTick_Config+0x40>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093e:	210f      	movs	r1, #15
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f7ff ff8e 	bl	8000864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <SysTick_Config+0x40>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <SysTick_Config+0x40>)
 8000950:	2207      	movs	r2, #7
 8000952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	e000e010 	.word	0xe000e010

08000964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ff29 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800098c:	f7ff ff3e 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	6978      	ldr	r0, [r7, #20]
 8000998:	f7ff ff8e 	bl	80008b8 <NVIC_EncodePriority>
 800099c:	4602      	mov	r2, r0
 800099e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff5d 	bl	8000864 <__NVIC_SetPriority>
}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff31 	bl	8000828 <__NVIC_EnableIRQ>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ffa2 	bl	8000920 <SysTick_Config>
 80009dc:	4603      	mov	r3, r0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d101      	bne.n	80009fc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e037      	b.n	8000a6c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2202      	movs	r2, #2
 8000a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f9b8 	bl	8000dc4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
}  
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d101      	bne.n	8000a94 <HAL_DMA_Start_IT+0x20>
 8000a90:	2302      	movs	r3, #2
 8000a92:	e04a      	b.n	8000b2a <HAL_DMA_Start_IT+0xb6>
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2201      	movs	r2, #1
 8000a98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d13a      	bne.n	8000b1c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f022 0201 	bic.w	r2, r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f000 f94b 	bl	8000d66 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d008      	beq.n	8000aea <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f042 020e 	orr.w	r2, r2, #14
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e00f      	b.n	8000b0a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f042 020a 	orr.w	r2, r2, #10
 8000af8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 0204 	bic.w	r2, r2, #4
 8000b08:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f042 0201 	orr.w	r2, r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	e005      	b.n	8000b28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000b24:	2302      	movs	r3, #2
 8000b26:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000b28:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d008      	beq.n	8000b56 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2204      	movs	r2, #4
 8000b48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e020      	b.n	8000b98 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 020e 	bic.w	r2, r2, #14
 8000b64:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 0201 	bic.w	r2, r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fa01 f202 	lsl.w	r2, r1, r2
 8000b84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d005      	beq.n	8000bc6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	e027      	b.n	8000c16 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f022 020e 	bic.w	r2, r2, #14
 8000bd4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 0201 	bic.w	r2, r2, #1
 8000be4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	4798      	blx	r3
    } 
  }
  return status;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d024      	beq.n	8000c92 <HAL_DMA_IRQHandler+0x72>
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d01f      	beq.n	8000c92 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d107      	bne.n	8000c70 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 0204 	bic.w	r2, r2, #4
 8000c6e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c78:	2104      	movs	r1, #4
 8000c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d06a      	beq.n	8000d5e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c90:	e065      	b.n	8000d5e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	2202      	movs	r2, #2
 8000c98:	409a      	lsls	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d02c      	beq.n	8000cfc <HAL_DMA_IRQHandler+0xdc>
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d027      	beq.n	8000cfc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0320 	and.w	r3, r3, #32
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f022 020a 	bic.w	r2, r2, #10
 8000cc8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cda:	2102      	movs	r1, #2
 8000cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d035      	beq.n	8000d5e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000cfa:	e030      	b.n	8000d5e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	2208      	movs	r2, #8
 8000d02:	409a      	lsls	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d028      	beq.n	8000d5e <HAL_DMA_IRQHandler+0x13e>
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d023      	beq.n	8000d5e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 020e 	bic.w	r2, r2, #14
 8000d24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d004      	beq.n	8000d5e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	4798      	blx	r3
    }
  }
}  
 8000d5c:	e7ff      	b.n	8000d5e <HAL_DMA_IRQHandler+0x13e>
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b085      	sub	sp, #20
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b10      	cmp	r3, #16
 8000d92:	d108      	bne.n	8000da6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000da4:	e007      	b.n	8000db6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	60da      	str	r2, [r3, #12]
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <DMA_CalcBaseAndBitshift+0x60>)
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d80f      	bhi.n	8000df8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <DMA_CalcBaseAndBitshift+0x64>)
 8000de0:	4413      	add	r3, r2
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <DMA_CalcBaseAndBitshift+0x68>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	091b      	lsrs	r3, r3, #4
 8000dea:	009a      	lsls	r2, r3, #2
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <DMA_CalcBaseAndBitshift+0x6c>)
 8000df4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000df6:	e00e      	b.n	8000e16 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <DMA_CalcBaseAndBitshift+0x70>)
 8000e00:	4413      	add	r3, r2
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <DMA_CalcBaseAndBitshift+0x68>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	009a      	lsls	r2, r3, #2
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <DMA_CalcBaseAndBitshift+0x74>)
 8000e14:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40020407 	.word	0x40020407
 8000e28:	bffdfff8 	.word	0xbffdfff8
 8000e2c:	cccccccd 	.word	0xcccccccd
 8000e30:	40020000 	.word	0x40020000
 8000e34:	bffdfbf8 	.word	0xbffdfbf8
 8000e38:	40020400 	.word	0x40020400

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4a:	e160      	b.n	800110e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8152 	beq.w	8001108 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d005      	beq.n	8000e7c <HAL_GPIO_Init+0x40>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d130      	bne.n	8000ede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	f003 0201 	and.w	r2, r3, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d017      	beq.n	8000f1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d123      	bne.n	8000f6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	691a      	ldr	r2, [r3, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	6939      	ldr	r1, [r7, #16]
 8000f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0203 	and.w	r2, r3, #3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 80ac 	beq.w	8001108 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb0:	4b5e      	ldr	r3, [pc, #376]	; (800112c <HAL_GPIO_Init+0x2f0>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a5d      	ldr	r2, [pc, #372]	; (800112c <HAL_GPIO_Init+0x2f0>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b5b      	ldr	r3, [pc, #364]	; (800112c <HAL_GPIO_Init+0x2f0>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc8:	4a59      	ldr	r2, [pc, #356]	; (8001130 <HAL_GPIO_Init+0x2f4>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ff2:	d025      	beq.n	8001040 <HAL_GPIO_Init+0x204>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a4f      	ldr	r2, [pc, #316]	; (8001134 <HAL_GPIO_Init+0x2f8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d01f      	beq.n	800103c <HAL_GPIO_Init+0x200>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a4e      	ldr	r2, [pc, #312]	; (8001138 <HAL_GPIO_Init+0x2fc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d019      	beq.n	8001038 <HAL_GPIO_Init+0x1fc>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a4d      	ldr	r2, [pc, #308]	; (800113c <HAL_GPIO_Init+0x300>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d013      	beq.n	8001034 <HAL_GPIO_Init+0x1f8>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a4c      	ldr	r2, [pc, #304]	; (8001140 <HAL_GPIO_Init+0x304>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00d      	beq.n	8001030 <HAL_GPIO_Init+0x1f4>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a4b      	ldr	r2, [pc, #300]	; (8001144 <HAL_GPIO_Init+0x308>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d007      	beq.n	800102c <HAL_GPIO_Init+0x1f0>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d101      	bne.n	8001028 <HAL_GPIO_Init+0x1ec>
 8001024:	2306      	movs	r3, #6
 8001026:	e00c      	b.n	8001042 <HAL_GPIO_Init+0x206>
 8001028:	2307      	movs	r3, #7
 800102a:	e00a      	b.n	8001042 <HAL_GPIO_Init+0x206>
 800102c:	2305      	movs	r3, #5
 800102e:	e008      	b.n	8001042 <HAL_GPIO_Init+0x206>
 8001030:	2304      	movs	r3, #4
 8001032:	e006      	b.n	8001042 <HAL_GPIO_Init+0x206>
 8001034:	2303      	movs	r3, #3
 8001036:	e004      	b.n	8001042 <HAL_GPIO_Init+0x206>
 8001038:	2302      	movs	r3, #2
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0x206>
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <HAL_GPIO_Init+0x206>
 8001040:	2300      	movs	r3, #0
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	f002 0203 	and.w	r2, r2, #3
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	4093      	lsls	r3, r2
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001052:	4937      	ldr	r1, [pc, #220]	; (8001130 <HAL_GPIO_Init+0x2f4>)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b3a      	ldr	r3, [pc, #232]	; (800114c <HAL_GPIO_Init+0x310>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001084:	4a31      	ldr	r2, [pc, #196]	; (800114c <HAL_GPIO_Init+0x310>)
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800108a:	4b30      	ldr	r3, [pc, #192]	; (800114c <HAL_GPIO_Init+0x310>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010ae:	4a27      	ldr	r2, [pc, #156]	; (800114c <HAL_GPIO_Init+0x310>)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <HAL_GPIO_Init+0x310>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010d8:	4a1c      	ldr	r2, [pc, #112]	; (800114c <HAL_GPIO_Init+0x310>)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_GPIO_Init+0x310>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <HAL_GPIO_Init+0x310>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	f47f ae97 	bne.w	8000e4c <HAL_GPIO_Init+0x10>
  }
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	371c      	adds	r7, #28
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40021000 	.word	0x40021000
 8001130:	40010000 	.word	0x40010000
 8001134:	48000400 	.word	0x48000400
 8001138:	48000800 	.word	0x48000800
 800113c:	48000c00 	.word	0x48000c00
 8001140:	48001000 	.word	0x48001000
 8001144:	48001400 	.word	0x48001400
 8001148:	48001800 	.word	0x48001800
 800114c:	40010400 	.word	0x40010400

08001150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001156:	af00      	add	r7, sp, #0
 8001158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800115c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001160:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001166:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	f001 b83a 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800117a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 816f 	beq.w	800146a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800118c:	4bb5      	ldr	r3, [pc, #724]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b04      	cmp	r3, #4
 8001196:	d00c      	beq.n	80011b2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001198:	4bb2      	ldr	r3, [pc, #712]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d15c      	bne.n	800125e <HAL_RCC_OscConfig+0x10e>
 80011a4:	4baf      	ldr	r3, [pc, #700]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b0:	d155      	bne.n	800125e <HAL_RCC_OscConfig+0x10e>
 80011b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ca:	fab3 f383 	clz	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d102      	bne.n	80011e4 <HAL_RCC_OscConfig+0x94>
 80011de:	4ba1      	ldr	r3, [pc, #644]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	e015      	b.n	8001210 <HAL_RCC_OscConfig+0xc0>
 80011e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80011f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011fc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001200:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800120c:	4b95      	ldr	r3, [pc, #596]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001214:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001218:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800121c:	fa92 f2a2 	rbit	r2, r2
 8001220:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001224:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001228:	fab2 f282 	clz	r2, r2
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	f042 0220 	orr.w	r2, r2, #32
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	f002 021f 	and.w	r2, r2, #31
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f202 	lsl.w	r2, r1, r2
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 8111 	beq.w	8001468 <HAL_RCC_OscConfig+0x318>
 8001246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800124a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 8108 	bne.w	8001468 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	f000 bfc6 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001262:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x12e>
 8001270:	4b7c      	ldr	r3, [pc, #496]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a7b      	ldr	r2, [pc, #492]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 8001276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e036      	b.n	80012ec <HAL_RCC_OscConfig+0x19c>
 800127e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001282:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x158>
 800128e:	4b75      	ldr	r3, [pc, #468]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a74      	ldr	r2, [pc, #464]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 8001294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b72      	ldr	r3, [pc, #456]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a71      	ldr	r2, [pc, #452]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e021      	b.n	80012ec <HAL_RCC_OscConfig+0x19c>
 80012a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x184>
 80012ba:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a69      	ldr	r2, [pc, #420]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b67      	ldr	r3, [pc, #412]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a66      	ldr	r2, [pc, #408]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0x19c>
 80012d4:	4b63      	ldr	r3, [pc, #396]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a62      	ldr	r2, [pc, #392]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b60      	ldr	r3, [pc, #384]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a5f      	ldr	r2, [pc, #380]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ea:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d059      	beq.n	80013b0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fa56 	bl	80007ac <HAL_GetTick>
 8001300:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001304:	e00a      	b.n	800131c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001306:	f7ff fa51 	bl	80007ac <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d902      	bls.n	800131c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	f000 bf67 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
 800131c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001320:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001324:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001330:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001334:	fab3 f383 	clz	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d102      	bne.n	800134e <HAL_RCC_OscConfig+0x1fe>
 8001348:	4b46      	ldr	r3, [pc, #280]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	e015      	b.n	800137a <HAL_RCC_OscConfig+0x22a>
 800134e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001352:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001362:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001366:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800136a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800137e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001382:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001386:	fa92 f2a2 	rbit	r2, r2
 800138a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800138e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001392:	fab2 f282 	clz	r2, r2
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	f042 0220 	orr.w	r2, r2, #32
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	f002 021f 	and.w	r2, r2, #31
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0ab      	beq.n	8001306 <HAL_RCC_OscConfig+0x1b6>
 80013ae:	e05c      	b.n	800146a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff f9fc 	bl	80007ac <HAL_GetTick>
 80013b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ba:	f7ff f9f7 	bl	80007ac <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d902      	bls.n	80013d0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	f000 bf0d 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
 80013d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80013dc:	fa93 f3a3 	rbit	r3, r3
 80013e0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80013e4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e8:	fab3 f383 	clz	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d102      	bne.n	8001402 <HAL_RCC_OscConfig+0x2b2>
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x2de>
 8001402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001406:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800141e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_RCC_OscConfig+0x314>)
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001432:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001436:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800143a:	fa92 f2a2 	rbit	r2, r2
 800143e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001442:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001446:	fab2 f282 	clz	r2, r2
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	f042 0220 	orr.w	r2, r2, #32
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	f002 021f 	and.w	r2, r2, #31
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f202 	lsl.w	r2, r1, r2
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1ab      	bne.n	80013ba <HAL_RCC_OscConfig+0x26a>
 8001462:	e002      	b.n	800146a <HAL_RCC_OscConfig+0x31a>
 8001464:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 817f 	beq.w	800177e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001480:	4ba7      	ldr	r3, [pc, #668]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800148c:	4ba4      	ldr	r3, [pc, #656]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d173      	bne.n	8001580 <HAL_RCC_OscConfig+0x430>
 8001498:	4ba1      	ldr	r3, [pc, #644]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014a4:	d16c      	bne.n	8001580 <HAL_RCC_OscConfig+0x430>
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ac:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80014b0:	fa93 f3a3 	rbit	r3, r3
 80014b4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80014b8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d102      	bne.n	80014d6 <HAL_RCC_OscConfig+0x386>
 80014d0:	4b93      	ldr	r3, [pc, #588]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	e013      	b.n	80014fe <HAL_RCC_OscConfig+0x3ae>
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014e0:	fa93 f3a3 	rbit	r3, r3
 80014e4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80014e8:	2302      	movs	r3, #2
 80014ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014ee:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014fa:	4b89      	ldr	r3, [pc, #548]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	2202      	movs	r2, #2
 8001500:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001504:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001508:	fa92 f2a2 	rbit	r2, r2
 800150c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001510:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001514:	fab2 f282 	clz	r2, r2
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	f042 0220 	orr.w	r2, r2, #32
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	f002 021f 	and.w	r2, r2, #31
 8001524:	2101      	movs	r1, #1
 8001526:	fa01 f202 	lsl.w	r2, r1, r2
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00a      	beq.n	8001546 <HAL_RCC_OscConfig+0x3f6>
 8001530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001534:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d002      	beq.n	8001546 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	f000 be52 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4b76      	ldr	r3, [pc, #472]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001552:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	21f8      	movs	r1, #248	; 0xf8
 800155c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001564:	fa91 f1a1 	rbit	r1, r1
 8001568:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800156c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001570:	fab1 f181 	clz	r1, r1
 8001574:	b2c9      	uxtb	r1, r1
 8001576:	408b      	lsls	r3, r1
 8001578:	4969      	ldr	r1, [pc, #420]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	e0fe      	b.n	800177e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001584:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8088 	beq.w	80016a2 <HAL_RCC_OscConfig+0x552>
 8001592:	2301      	movs	r3, #1
 8001594:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80015a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	461a      	mov	r2, r3
 80015ba:	2301      	movs	r3, #1
 80015bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff f8f5 	bl	80007ac <HAL_GetTick>
 80015c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c6:	e00a      	b.n	80015de <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff f8f0 	bl	80007ac <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d902      	bls.n	80015de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	f000 be06 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
 80015de:	2302      	movs	r3, #2
 80015e0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80015e8:	fa93 f3a3 	rbit	r3, r3
 80015ec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80015f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d102      	bne.n	800160e <HAL_RCC_OscConfig+0x4be>
 8001608:	4b45      	ldr	r3, [pc, #276]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	e013      	b.n	8001636 <HAL_RCC_OscConfig+0x4e6>
 800160e:	2302      	movs	r3, #2
 8001610:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001618:	fa93 f3a3 	rbit	r3, r3
 800161c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001620:	2302      	movs	r3, #2
 8001622:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001626:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001632:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	2202      	movs	r2, #2
 8001638:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800163c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001640:	fa92 f2a2 	rbit	r2, r2
 8001644:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001648:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800164c:	fab2 f282 	clz	r2, r2
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	f042 0220 	orr.w	r2, r2, #32
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	f002 021f 	and.w	r2, r2, #31
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f202 	lsl.w	r2, r1, r2
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0af      	beq.n	80015c8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001674:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	21f8      	movs	r1, #248	; 0xf8
 800167e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001686:	fa91 f1a1 	rbit	r1, r1
 800168a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800168e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001692:	fab1 f181 	clz	r1, r1
 8001696:	b2c9      	uxtb	r1, r1
 8001698:	408b      	lsls	r3, r1
 800169a:	4921      	ldr	r1, [pc, #132]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
 80016a0:	e06d      	b.n	800177e <HAL_RCC_OscConfig+0x62e>
 80016a2:	2301      	movs	r3, #1
 80016a4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016ac:	fa93 f3a3 	rbit	r3, r3
 80016b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80016b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b8:	fab3 f383 	clz	r3, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	461a      	mov	r2, r3
 80016ca:	2300      	movs	r3, #0
 80016cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff f86d 	bl	80007ac <HAL_GetTick>
 80016d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff f868 	bl	80007ac <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d902      	bls.n	80016ee <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	f000 bd7e 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
 80016ee:	2302      	movs	r3, #2
 80016f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001700:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d105      	bne.n	8001724 <HAL_RCC_OscConfig+0x5d4>
 8001718:	4b01      	ldr	r3, [pc, #4]	; (8001720 <HAL_RCC_OscConfig+0x5d0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	e016      	b.n	800174c <HAL_RCC_OscConfig+0x5fc>
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	2302      	movs	r3, #2
 8001726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800172e:	fa93 f3a3 	rbit	r3, r3
 8001732:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001736:	2302      	movs	r3, #2
 8001738:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800173c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001748:	4bbf      	ldr	r3, [pc, #764]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	2202      	movs	r2, #2
 800174e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001752:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001756:	fa92 f2a2 	rbit	r2, r2
 800175a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800175e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001762:	fab2 f282 	clz	r2, r2
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	f042 0220 	orr.w	r2, r2, #32
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	f002 021f 	and.w	r2, r2, #31
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ac      	bne.n	80016d8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001782:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8113 	beq.w	80019ba <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001798:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d07c      	beq.n	800189e <HAL_RCC_OscConfig+0x74e>
 80017a4:	2301      	movs	r3, #1
 80017a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017ae:	fa93 f3a3 	rbit	r3, r3
 80017b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80017b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	4ba2      	ldr	r3, [pc, #648]	; (8001a4c <HAL_RCC_OscConfig+0x8fc>)
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	461a      	mov	r2, r3
 80017ca:	2301      	movs	r3, #1
 80017cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7fe ffed 	bl	80007ac <HAL_GetTick>
 80017d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d8:	f7fe ffe8 	bl	80007ac <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d902      	bls.n	80017ee <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	f000 bcfe 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
 80017ee:	2302      	movs	r3, #2
 80017f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017f8:	fa93 f2a3 	rbit	r2, r3
 80017fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001800:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800180e:	2202      	movs	r2, #2
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	fa93 f2a3 	rbit	r2, r3
 8001820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001832:	2202      	movs	r2, #2
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	fa93 f2a3 	rbit	r2, r3
 8001844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001848:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800184c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	4b7e      	ldr	r3, [pc, #504]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 8001850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001856:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800185a:	2102      	movs	r1, #2
 800185c:	6019      	str	r1, [r3, #0]
 800185e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001862:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f1a3 	rbit	r1, r3
 800186c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001870:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001874:	6019      	str	r1, [r3, #0]
  return result;
 8001876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d09d      	beq.n	80017d8 <HAL_RCC_OscConfig+0x688>
 800189c:	e08d      	b.n	80019ba <HAL_RCC_OscConfig+0x86a>
 800189e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018c0:	601a      	str	r2, [r3, #0]
  return result;
 80018c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b5d      	ldr	r3, [pc, #372]	; (8001a4c <HAL_RCC_OscConfig+0x8fc>)
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	461a      	mov	r2, r3
 80018dc:	2300      	movs	r3, #0
 80018de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e0:	f7fe ff64 	bl	80007ac <HAL_GetTick>
 80018e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ea:	f7fe ff5f 	bl	80007ac <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d902      	bls.n	8001900 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	f000 bc75 	b.w	80021ea <HAL_RCC_OscConfig+0x109a>
 8001900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001904:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001908:	2202      	movs	r2, #2
 800190a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001910:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	fa93 f2a3 	rbit	r2, r3
 800191a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001928:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800192c:	2202      	movs	r2, #2
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	fa93 f2a3 	rbit	r2, r3
 800193e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001950:	2202      	movs	r2, #2
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001958:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001966:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800196a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 800196e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001974:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001978:	2102      	movs	r1, #2
 800197a:	6019      	str	r1, [r3, #0]
 800197c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001980:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	fa93 f1a3 	rbit	r1, r3
 800198a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001992:	6019      	str	r1, [r3, #0]
  return result;
 8001994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001998:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d197      	bne.n	80018ea <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 81a5 	beq.w	8001d1a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d116      	bne.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_RCC_OscConfig+0x8f8>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80019f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a08:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_RCC_OscConfig+0x900>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d121      	bne.n	8001a60 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_RCC_OscConfig+0x900>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <HAL_RCC_OscConfig+0x900>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a28:	f7fe fec0 	bl	80007ac <HAL_GetTick>
 8001a2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	e010      	b.n	8001a54 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7fe febb 	bl	80007ac <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d908      	bls.n	8001a54 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e3d1      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	10908120 	.word	0x10908120
 8001a50:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	4b8d      	ldr	r3, [pc, #564]	; (8001c8c <HAL_RCC_OscConfig+0xb3c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0e8      	beq.n	8001a32 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x92e>
 8001a70:	4b87      	ldr	r3, [pc, #540]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a86      	ldr	r2, [pc, #536]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	e035      	b.n	8001aea <HAL_RCC_OscConfig+0x99a>
 8001a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x958>
 8001a8e:	4b80      	ldr	r3, [pc, #512]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a7f      	ldr	r2, [pc, #508]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	4b7d      	ldr	r3, [pc, #500]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a7c      	ldr	r2, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	e020      	b.n	8001aea <HAL_RCC_OscConfig+0x99a>
 8001aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d10c      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x982>
 8001ab8:	4b75      	ldr	r3, [pc, #468]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4a74      	ldr	r2, [pc, #464]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6213      	str	r3, [r2, #32]
 8001ac4:	4b72      	ldr	r3, [pc, #456]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a71      	ldr	r2, [pc, #452]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	e00b      	b.n	8001aea <HAL_RCC_OscConfig+0x99a>
 8001ad2:	4b6f      	ldr	r3, [pc, #444]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4a6e      	ldr	r2, [pc, #440]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	6213      	str	r3, [r2, #32]
 8001ade:	4b6c      	ldr	r3, [pc, #432]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a6b      	ldr	r2, [pc, #428]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8081 	beq.w	8001bfe <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afc:	f7fe fe56 	bl	80007ac <HAL_GetTick>
 8001b00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b04:	e00b      	b.n	8001b1e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7fe fe51 	bl	80007ac <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e365      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
 8001b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b22:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b26:	2202      	movs	r2, #2
 8001b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fa93 f2a3 	rbit	r2, r3
 8001b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b46:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	fa93 f2a3 	rbit	r2, r3
 8001b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b60:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b64:	601a      	str	r2, [r3, #0]
  return result;
 8001b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f043 0302 	orr.w	r3, r3, #2
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d102      	bne.n	8001b8a <HAL_RCC_OscConfig+0xa3a>
 8001b84:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	e013      	b.n	8001bb2 <HAL_RCC_OscConfig+0xa62>
 8001b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b92:	2202      	movs	r2, #2
 8001b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f2a3 	rbit	r2, r3
 8001ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bb6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bba:	2102      	movs	r1, #2
 8001bbc:	6011      	str	r1, [r2, #0]
 8001bbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bc2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	fa92 f1a2 	rbit	r1, r2
 8001bcc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bd0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001bd4:	6011      	str	r1, [r2, #0]
  return result;
 8001bd6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bda:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	fab2 f282 	clz	r2, r2
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f002 021f 	and.w	r2, r2, #31
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d084      	beq.n	8001b06 <HAL_RCC_OscConfig+0x9b6>
 8001bfc:	e083      	b.n	8001d06 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7fe fdd5 	bl	80007ac <HAL_GetTick>
 8001c02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c08:	f7fe fdd0 	bl	80007ac <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e2e4      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
 8001c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c24:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c28:	2202      	movs	r2, #2
 8001c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	fa93 f2a3 	rbit	r2, r3
 8001c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c48:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	fa93 f2a3 	rbit	r2, r3
 8001c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c62:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c66:	601a      	str	r2, [r3, #0]
  return result;
 8001c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d106      	bne.n	8001c94 <HAL_RCC_OscConfig+0xb44>
 8001c86:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <HAL_RCC_OscConfig+0xb40>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	e017      	b.n	8001cbc <HAL_RCC_OscConfig+0xb6c>
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c98:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	4bb3      	ldr	r3, [pc, #716]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cc0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	6011      	str	r1, [r2, #0]
 8001cc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ccc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	fa92 f1a2 	rbit	r1, r2
 8001cd6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cda:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001cde:	6011      	str	r1, [r2, #0]
  return result;
 8001ce0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ce4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	fab2 f282 	clz	r2, r2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f002 021f 	and.w	r2, r2, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d180      	bne.n	8001c08 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d06:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d105      	bne.n	8001d1a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0e:	4b9e      	ldr	r3, [pc, #632]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a9d      	ldr	r2, [pc, #628]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d18:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 825e 	beq.w	80021e8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d2c:	4b96      	ldr	r3, [pc, #600]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	f000 821f 	beq.w	8002178 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	f040 8170 	bne.w	800202c <HAL_RCC_OscConfig+0xedc>
 8001d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d50:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d70:	601a      	str	r2, [r3, #0]
  return result;
 8001d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d76:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d7a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2300      	movs	r3, #0
 8001d90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7fe fd0b 	bl	80007ac <HAL_GetTick>
 8001d96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	e009      	b.n	8001db0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe fd06 	bl	80007ac <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e21c      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
 8001db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001dd4:	601a      	str	r2, [r3, #0]
  return result;
 8001dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dda:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001dde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_OscConfig+0xcaa>
 8001df4:	4b64      	ldr	r3, [pc, #400]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e027      	b.n	8001e4a <HAL_RCC_OscConfig+0xcfa>
 8001dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	fa93 f2a3 	rbit	r2, r3
 8001e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e24:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e32:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e40:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e4e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e56:	6011      	str	r1, [r2, #0]
 8001e58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e5c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	fa92 f1a2 	rbit	r1, r2
 8001e66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e6a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001e6e:	6011      	str	r1, [r2, #0]
  return result;
 8001e70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e74:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f042 0220 	orr.w	r2, r2, #32
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f002 021f 	and.w	r2, r2, #31
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d182      	bne.n	8001d9c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e96:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	f023 020f 	bic.w	r2, r3, #15
 8001e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	4937      	ldr	r1, [pc, #220]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001eb0:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6a19      	ldr	r1, [r3, #32]
 8001ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	492d      	ldr	r1, [pc, #180]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
 8001ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001edc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001efc:	601a      	str	r2, [r3, #0]
  return result;
 8001efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f02:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f06:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7fe fc45 	bl	80007ac <HAL_GetTick>
 8001f22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f26:	e009      	b.n	8001f3c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe fc40 	bl	80007ac <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e156      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
 8001f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f40:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	fa93 f2a3 	rbit	r2, r3
 8001f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f60:	601a      	str	r2, [r3, #0]
  return result;
 8001f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f66:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d105      	bne.n	8001f8c <HAL_RCC_OscConfig+0xe3c>
 8001f80:	4b01      	ldr	r3, [pc, #4]	; (8001f88 <HAL_RCC_OscConfig+0xe38>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	e02a      	b.n	8001fdc <HAL_RCC_OscConfig+0xe8c>
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	fa93 f2a3 	rbit	r2, r3
 8001fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	4b86      	ldr	r3, [pc, #536]	; (80021f4 <HAL_RCC_OscConfig+0x10a4>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fe0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001fe4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fe8:	6011      	str	r1, [r2, #0]
 8001fea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	fa92 f1a2 	rbit	r1, r2
 8001ff8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ffc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002000:	6011      	str	r1, [r2, #0]
  return result;
 8002002:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002006:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	fab2 f282 	clz	r2, r2
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	f042 0220 	orr.w	r2, r2, #32
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	f002 021f 	and.w	r2, r2, #31
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f202 	lsl.w	r2, r1, r2
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	f43f af7f 	beq.w	8001f28 <HAL_RCC_OscConfig+0xdd8>
 800202a:	e0dd      	b.n	80021e8 <HAL_RCC_OscConfig+0x1098>
 800202c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002030:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002050:	601a      	str	r2, [r3, #0]
  return result;
 8002052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002056:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800205a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002066:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	461a      	mov	r2, r3
 800206e:	2300      	movs	r3, #0
 8002070:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7fe fb9b 	bl	80007ac <HAL_GetTick>
 8002076:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	e009      	b.n	8002090 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207c:	f7fe fb96 	bl	80007ac <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0ac      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
 8002090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002094:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800209c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	fa93 f2a3 	rbit	r2, r3
 80020ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020b4:	601a      	str	r2, [r3, #0]
  return result;
 80020b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d102      	bne.n	80020da <HAL_RCC_OscConfig+0xf8a>
 80020d4:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_OscConfig+0x10a4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	e027      	b.n	800212a <HAL_RCC_OscConfig+0xfda>
 80020da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020de:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80020e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fa93 f2a3 	rbit	r2, r3
 80020f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002104:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002112:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fa93 f2a3 	rbit	r2, r3
 800211c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002120:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	4b33      	ldr	r3, [pc, #204]	; (80021f4 <HAL_RCC_OscConfig+0x10a4>)
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800212e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002132:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002136:	6011      	str	r1, [r2, #0]
 8002138:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800213c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	fa92 f1a2 	rbit	r1, r2
 8002146:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800214a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800214e:	6011      	str	r1, [r2, #0]
  return result;
 8002150:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002154:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f042 0220 	orr.w	r2, r2, #32
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f002 021f 	and.w	r2, r2, #31
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d182      	bne.n	800207c <HAL_RCC_OscConfig+0xf2c>
 8002176:	e037      	b.n	80021e8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e02e      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_RCC_OscConfig+0x10a4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002194:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_RCC_OscConfig+0x10a4>)
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800219c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021a0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80021a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d117      	bne.n	80021e4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021b8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80021cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000

080021f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b09e      	sub	sp, #120	; 0x78
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e162      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002210:	4b90      	ldr	r3, [pc, #576]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d910      	bls.n	8002240 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b8d      	ldr	r3, [pc, #564]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 0207 	bic.w	r2, r3, #7
 8002226:	498b      	ldr	r1, [pc, #556]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b89      	ldr	r3, [pc, #548]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e14a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b82      	ldr	r3, [pc, #520]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	497f      	ldr	r1, [pc, #508]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80dc 	beq.w	8002424 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d13c      	bne.n	80022ee <HAL_RCC_ClockConfig+0xf6>
 8002274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002278:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d102      	bne.n	800229e <HAL_RCC_ClockConfig+0xa6>
 8002298:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	e00f      	b.n	80022be <HAL_RCC_ClockConfig+0xc6>
 800229e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	667b      	str	r3, [r7, #100]	; 0x64
 80022ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b0:	663b      	str	r3, [r7, #96]	; 0x60
 80022b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80022c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022c6:	fa92 f2a2 	rbit	r2, r2
 80022ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80022cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022ce:	fab2 f282 	clz	r2, r2
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f042 0220 	orr.w	r2, r2, #32
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f002 021f 	and.w	r2, r2, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d17b      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0f3      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d13c      	bne.n	8002370 <HAL_RCC_ClockConfig+0x178>
 80022f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d102      	bne.n	8002320 <HAL_RCC_ClockConfig+0x128>
 800231a:	4b4f      	ldr	r3, [pc, #316]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	e00f      	b.n	8002340 <HAL_RCC_ClockConfig+0x148>
 8002320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002324:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	647b      	str	r3, [r7, #68]	; 0x44
 800232e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002332:	643b      	str	r3, [r7, #64]	; 0x40
 8002334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233c:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002344:	63ba      	str	r2, [r7, #56]	; 0x38
 8002346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002348:	fa92 f2a2 	rbit	r2, r2
 800234c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800234e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002350:	fab2 f282 	clz	r2, r2
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f042 0220 	orr.w	r2, r2, #32
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	f002 021f 	and.w	r2, r2, #31
 8002360:	2101      	movs	r1, #1
 8002362:	fa01 f202 	lsl.w	r2, r1, r2
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d13a      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0b2      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
 8002370:	2302      	movs	r3, #2
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <HAL_RCC_ClockConfig+0x1a0>
 8002392:	4b31      	ldr	r3, [pc, #196]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	e00d      	b.n	80023b4 <HAL_RCC_ClockConfig+0x1bc>
 8002398:	2302      	movs	r3, #2
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
 80023a4:	2302      	movs	r3, #2
 80023a6:	623b      	str	r3, [r7, #32]
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	2202      	movs	r2, #2
 80023b6:	61ba      	str	r2, [r7, #24]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	fa92 f2a2 	rbit	r2, r2
 80023be:	617a      	str	r2, [r7, #20]
  return result;
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	fab2 f282 	clz	r2, r2
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f042 0220 	orr.w	r2, r2, #32
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	f002 021f 	and.w	r2, r2, #31
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e079      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	491a      	ldr	r1, [pc, #104]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f4:	f7fe f9da 	bl	80007ac <HAL_GetTick>
 80023f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe f9d6 	bl	80007ac <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e061      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d214      	bcs.n	800245c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 0207 	bic.w	r2, r3, #7
 800243a:	4906      	ldr	r1, [pc, #24]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e040      	b.n	80024d6 <HAL_RCC_ClockConfig+0x2de>
 8002454:	40022000 	.word	0x40022000
 8002458:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002468:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <HAL_RCC_ClockConfig+0x2e8>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	491a      	ldr	r1, [pc, #104]	; (80024e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002486:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4912      	ldr	r1, [pc, #72]	; (80024e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800249a:	f000 f829 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 800249e:	4601      	mov	r1, r0
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_RCC_ClockConfig+0x2e8>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a8:	22f0      	movs	r2, #240	; 0xf0
 80024aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	fa92 f2a2 	rbit	r2, r2
 80024b2:	60fa      	str	r2, [r7, #12]
  return result;
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	fab2 f282 	clz	r2, r2
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	40d3      	lsrs	r3, r2
 80024be:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_RCC_ClockConfig+0x2ec>)
 80024c0:	5cd3      	ldrb	r3, [r2, r3]
 80024c2:	fa21 f303 	lsr.w	r3, r1, r3
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_RCC_ClockConfig+0x2f0>)
 80024c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_RCC_ClockConfig+0x2f4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f928 	bl	8000724 <HAL_InitTick>
  
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3778      	adds	r7, #120	; 0x78
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08004134 	.word	0x08004134
 80024e8:	20000000 	.word	0x20000000
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b08b      	sub	sp, #44	; 0x2c
 80024f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800250a:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b04      	cmp	r3, #4
 8002518:	d002      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x30>
 800251a:	2b08      	cmp	r3, #8
 800251c:	d003      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0x36>
 800251e:	e03f      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002522:	623b      	str	r3, [r7, #32]
      break;
 8002524:	e03f      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800252c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002530:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	fa92 f2a2 	rbit	r2, r2
 8002538:	607a      	str	r2, [r7, #4]
  return result;
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	fab2 f282 	clz	r2, r2
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	40d3      	lsrs	r3, r2
 8002544:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	220f      	movs	r2, #15
 8002554:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	fa92 f2a2 	rbit	r2, r2
 800255c:	60fa      	str	r2, [r7, #12]
  return result;
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	fab2 f282 	clz	r2, r2
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	40d3      	lsrs	r3, r2
 8002568:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002578:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
 8002588:	e007      	b.n	800259a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	623b      	str	r3, [r7, #32]
      break;
 800259e:	e002      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025a2:	623b      	str	r3, [r7, #32]
      break;
 80025a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a6:	6a3b      	ldr	r3, [r7, #32]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	372c      	adds	r7, #44	; 0x2c
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40021000 	.word	0x40021000
 80025b8:	007a1200 	.word	0x007a1200
 80025bc:	0800414c 	.word	0x0800414c
 80025c0:	0800415c 	.word	0x0800415c

080025c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000000 	.word	0x20000000

080025dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025e2:	f7ff ffef 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80025e6:	4601      	mov	r1, r0
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	fa92 f2a2 	rbit	r2, r2
 80025fc:	603a      	str	r2, [r7, #0]
  return result;
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	fab2 f282 	clz	r2, r2
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	40d3      	lsrs	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <HAL_RCC_GetPCLK1Freq+0x40>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	08004144 	.word	0x08004144

08002620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002626:	f7ff ffcd 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 800262a:	4601      	mov	r1, r0
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002634:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002638:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	fa92 f2a2 	rbit	r2, r2
 8002640:	603a      	str	r2, [r7, #0]
  return result;
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	fab2 f282 	clz	r2, r2
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	40d3      	lsrs	r3, r2
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x40>)
 800264e:	5cd3      	ldrb	r3, [r2, r3]
 8002650:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	08004144 	.word	0x08004144

08002664 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b092      	sub	sp, #72	; 0x48
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80d4 	beq.w	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002688:	4b4e      	ldr	r3, [pc, #312]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10e      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002694:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	4a4a      	ldr	r2, [pc, #296]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	61d3      	str	r3, [r2, #28]
 80026a0:	4b48      	ldr	r3, [pc, #288]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b45      	ldr	r3, [pc, #276]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b42      	ldr	r3, [pc, #264]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a41      	ldr	r2, [pc, #260]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7fe f86f 	bl	80007ac <HAL_GetTick>
 80026ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7fe f86b 	bl	80007ac <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b64      	cmp	r3, #100	; 0x64
 80026de:	d901      	bls.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e1d6      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026f0:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8084 	beq.w	800280a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800270c:	429a      	cmp	r2, r3
 800270e:	d07c      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002710:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800271a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	461a      	mov	r2, r3
 800273a:	2301      	movs	r3, #1
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800274c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	461a      	mov	r2, r3
 800275e:	2300      	movs	r3, #0
 8002760:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002762:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002766:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d04b      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe f81b 	bl	80007ac <HAL_GetTick>
 8002776:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe f817 	bl	80007ac <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e180      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002790:	2302      	movs	r3, #2
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	2302      	movs	r3, #2
 800279e:	623b      	str	r3, [r7, #32]
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	61fb      	str	r3, [r7, #28]
  return result;
 80027a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d108      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027be:	4b01      	ldr	r3, [pc, #4]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	e00d      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40007000 	.word	0x40007000
 80027cc:	10908100 	.word	0x10908100
 80027d0:	2302      	movs	r3, #2
 80027d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	4b9a      	ldr	r3, [pc, #616]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2202      	movs	r2, #2
 80027e2:	613a      	str	r2, [r7, #16]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	fa92 f2a2 	rbit	r2, r2
 80027ea:	60fa      	str	r2, [r7, #12]
  return result;
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	fab2 f282 	clz	r2, r2
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0b7      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800280a:	4b8f      	ldr	r3, [pc, #572]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	498c      	ldr	r1, [pc, #560]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800281c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	4a87      	ldr	r2, [pc, #540]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800283c:	4b82      	ldr	r3, [pc, #520]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	f023 0203 	bic.w	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	497f      	ldr	r1, [pc, #508]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800285a:	4b7b      	ldr	r3, [pc, #492]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	4978      	ldr	r1, [pc, #480]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002878:	4b73      	ldr	r3, [pc, #460]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	4970      	ldr	r1, [pc, #448]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002896:	4b6c      	ldr	r3, [pc, #432]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f023 0210 	bic.w	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	4969      	ldr	r1, [pc, #420]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028b4:	4b64      	ldr	r3, [pc, #400]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	4961      	ldr	r1, [pc, #388]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028d2:	4b5d      	ldr	r3, [pc, #372]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f023 0220 	bic.w	r2, r3, #32
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	495a      	ldr	r1, [pc, #360]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028f0:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	4952      	ldr	r1, [pc, #328]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800290e:	4b4e      	ldr	r3, [pc, #312]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	494b      	ldr	r1, [pc, #300]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800292c:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	4943      	ldr	r1, [pc, #268]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800294a:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	493c      	ldr	r1, [pc, #240]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002968:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	4934      	ldr	r1, [pc, #208]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	492d      	ldr	r1, [pc, #180]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b0:	4925      	ldr	r1, [pc, #148]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	491e      	ldr	r1, [pc, #120]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	4916      	ldr	r1, [pc, #88]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	490f      	ldr	r1, [pc, #60]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	4907      	ldr	r1, [pc, #28]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a3a:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	e002      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4e:	4913      	ldr	r1, [pc, #76]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	490b      	ldr	r1, [pc, #44]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8a:	4904      	ldr	r1, [pc, #16]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3748      	adds	r7, #72	; 0x48
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e040      	b.n	8002b34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fd fcd6 	bl	8000474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2224      	movs	r2, #36	; 0x24
 8002acc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fcb0 	bl	8003444 <UART_SetConfig>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e022      	b.n	8002b34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fe7a 	bl	80037f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 ff01 	bl	8003934 <UART_CheckIdleState>
 8002b32:	4603      	mov	r3, r0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	f040 8082 	bne.w	8002c5a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_UART_Transmit+0x26>
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e07a      	b.n	8002c5c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_UART_Transmit+0x38>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e073      	b.n	8002c5c <HAL_UART_Transmit+0x120>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2221      	movs	r2, #33	; 0x21
 8002b88:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b8a:	f7fd fe0f 	bl	80007ac <HAL_GetTick>
 8002b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	88fa      	ldrh	r2, [r7, #6]
 8002b94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba8:	d108      	bne.n	8002bbc <HAL_UART_Transmit+0x80>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d104      	bne.n	8002bbc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	e003      	b.n	8002bc4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002bcc:	e02d      	b.n	8002c2a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2180      	movs	r1, #128	; 0x80
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fef4 	bl	80039c6 <UART_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e039      	b.n	8002c5c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10b      	bne.n	8002c06 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	881a      	ldrh	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bfa:	b292      	uxth	r2, r2
 8002bfc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	3302      	adds	r3, #2
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	e008      	b.n	8002c18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b292      	uxth	r2, r2
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3301      	adds	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1cb      	bne.n	8002bce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2140      	movs	r1, #64	; 0x40
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fec0 	bl	80039c6 <UART_WaitOnFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e005      	b.n	8002c5c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
  }
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	d178      	bne.n	8002d6c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_UART_Transmit_DMA+0x22>
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e071      	b.n	8002d6e <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_UART_Transmit_DMA+0x34>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e06a      	b.n	8002d6e <HAL_UART_Transmit_DMA+0x10a>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2221      	movs	r2, #33	; 0x21
 8002cc2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d02b      	beq.n	8002d24 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd0:	4a29      	ldr	r2, [pc, #164]	; (8002d78 <HAL_UART_Transmit_DMA+0x114>)
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd8:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <HAL_UART_Transmit_DMA+0x118>)
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <HAL_UART_Transmit_DMA+0x11c>)
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce8:	2200      	movs	r2, #0
 8002cea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3328      	adds	r3, #40	; 0x28
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	f7fd feb8 	bl	8000a74 <HAL_DMA_Start_IT>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00c      	beq.n	8002d24 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e024      	b.n	8002d6e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2240      	movs	r2, #64	; 0x40
 8002d2a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3308      	adds	r3, #8
 8002d3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	e853 3f00 	ldrex	r3, [r3]
 8002d42:	613b      	str	r3, [r7, #16]
   return(result);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3308      	adds	r3, #8
 8002d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d54:	623a      	str	r2, [r7, #32]
 8002d56:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d58:	69f9      	ldr	r1, [r7, #28]
 8002d5a:	6a3a      	ldr	r2, [r7, #32]
 8002d5c:	e841 2300 	strex	r3, r2, [r1]
 8002d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e5      	bne.n	8002d34 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e000      	b.n	8002d6e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3728      	adds	r7, #40	; 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	08003da7 	.word	0x08003da7
 8002d7c:	08003e3b 	.word	0x08003e3b
 8002d80:	08003fad 	.word	0x08003fad

08002d84 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	; 0x28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d13d      	bne.n	8002e16 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_UART_Receive_DMA+0x22>
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e036      	b.n	8002e18 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_UART_Receive_DMA+0x34>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e02f      	b.n	8002e18 <HAL_UART_Receive_DMA+0x94>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d018      	beq.n	8002e06 <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	613b      	str	r3, [r7, #16]
   return(result);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	623b      	str	r3, [r7, #32]
 8002df4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	69f9      	ldr	r1, [r7, #28]
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e6      	bne.n	8002dd4 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fe9f 	bl	8003b50 <UART_Start_Receive_DMA>
 8002e12:	4603      	mov	r3, r0
 8002e14:	e000      	b.n	8002e18 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
  }
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b0ba      	sub	sp, #232	; 0xe8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e4e:	4013      	ands	r3, r2
 8002e50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d115      	bne.n	8002e88 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00f      	beq.n	8002e88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d009      	beq.n	8002e88 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 82a3 	beq.w	80033c4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
      }
      return;
 8002e86:	e29d      	b.n	80033c4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8117 	beq.w	80030c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ea2:	4b85      	ldr	r3, [pc, #532]	; (80030b8 <HAL_UART_IRQHandler+0x298>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 810a 	beq.w	80030c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d011      	beq.n	8002edc <HAL_UART_IRQHandler+0xbc>
 8002eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d011      	beq.n	8002f0c <HAL_UART_IRQHandler+0xec>
 8002ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f02:	f043 0204 	orr.w	r2, r3, #4
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d011      	beq.n	8002f3c <HAL_UART_IRQHandler+0x11c>
 8002f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00b      	beq.n	8002f3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f32:	f043 0202 	orr.w	r2, r3, #2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d017      	beq.n	8002f78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2208      	movs	r2, #8
 8002f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6e:	f043 0208 	orr.w	r2, r3, #8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d012      	beq.n	8002faa <HAL_UART_IRQHandler+0x18a>
 8002f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00c      	beq.n	8002faa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8209 	beq.w	80033c8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fe4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d005      	beq.n	8003002 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ffa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d04f      	beq.n	80030a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fe6c 	bl	8003ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d141      	bne.n	800309a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3308      	adds	r3, #8
 800301c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800302c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3308      	adds	r3, #8
 800303e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003042:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800304e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003052:	e841 2300 	strex	r3, r2, [r1]
 8003056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800305a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1d9      	bne.n	8003016 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	2b00      	cmp	r3, #0
 8003068:	d013      	beq.n	8003092 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a13      	ldr	r2, [pc, #76]	; (80030bc <HAL_UART_IRQHandler+0x29c>)
 8003070:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fd94 	bl	8000ba4 <HAL_DMA_Abort_IT>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d017      	beq.n	80030b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800308c:	4610      	mov	r0, r2
 800308e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003090:	e00f      	b.n	80030b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f9c0 	bl	8003418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003098:	e00b      	b.n	80030b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f9bc 	bl	8003418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a0:	e007      	b.n	80030b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f9b8 	bl	8003418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80030b0:	e18a      	b.n	80033c8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b2:	bf00      	nop
    return;
 80030b4:	e188      	b.n	80033c8 <HAL_UART_IRQHandler+0x5a8>
 80030b6:	bf00      	nop
 80030b8:	04000120 	.word	0x04000120
 80030bc:	08004029 	.word	0x08004029

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	f040 8143 	bne.w	8003350 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 813c 	beq.w	8003350 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8135 	beq.w	8003350 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2210      	movs	r2, #16
 80030ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	f040 80b1 	bne.w	8003260 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800310a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 815c 	beq.w	80033cc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800311a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800311e:	429a      	cmp	r2, r3
 8003120:	f080 8154 	bcs.w	80033cc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800312a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b20      	cmp	r3, #32
 8003136:	f000 8085 	beq.w	8003244 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003146:	e853 3f00 	ldrex	r3, [r3]
 800314a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800314e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003156:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003164:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003168:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003170:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800317c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1da      	bne.n	800313a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3308      	adds	r3, #8
 800318a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800318e:	e853 3f00 	ldrex	r3, [r3]
 8003192:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003194:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3308      	adds	r3, #8
 80031a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031ac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031b4:	e841 2300 	strex	r3, r2, [r1]
 80031b8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e1      	bne.n	8003184 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3308      	adds	r3, #8
 80031c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ca:	e853 3f00 	ldrex	r3, [r3]
 80031ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3308      	adds	r3, #8
 80031e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031ec:	e841 2300 	strex	r3, r2, [r1]
 80031f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e3      	bne.n	80031c0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003214:	f023 0310 	bic.w	r3, r3, #16
 8003218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003226:	65bb      	str	r3, [r7, #88]	; 0x58
 8003228:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800322c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e4      	bne.n	8003204 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd fc77 	bl	8000b32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003250:	b29b      	uxth	r3, r3
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	b29b      	uxth	r3, r3
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8e7 	bl	800342c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800325e:	e0b5      	b.n	80033cc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800326c:	b29b      	uxth	r3, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80a7 	beq.w	80033d0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003282:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80a2 	beq.w	80033d0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032ae:	647b      	str	r3, [r7, #68]	; 0x44
 80032b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e4      	bne.n	800328c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3308      	adds	r3, #8
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	e853 3f00 	ldrex	r3, [r3]
 80032d0:	623b      	str	r3, [r7, #32]
   return(result);
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3308      	adds	r3, #8
 80032e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032e6:	633a      	str	r2, [r7, #48]	; 0x30
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e3      	bne.n	80032c2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	60fb      	str	r3, [r7, #12]
   return(result);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f023 0310 	bic.w	r3, r3, #16
 8003320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	69b9      	ldr	r1, [r7, #24]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	617b      	str	r3, [r7, #20]
   return(result);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e4      	bne.n	800330c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003342:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f86f 	bl	800342c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800334e:	e03f      	b.n	80033d0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <HAL_UART_IRQHandler+0x55a>
 800335c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fe98 	bl	80040a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003378:	e02d      	b.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00e      	beq.n	80033a4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01c      	beq.n	80033d4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
    }
    return;
 80033a2:	e017      	b.n	80033d4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
 80033b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00c      	beq.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fe49 	bl	8004054 <UART_EndTransmit_IT>
    return;
 80033c2:	e008      	b.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80033c4:	bf00      	nop
 80033c6:	e006      	b.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80033c8:	bf00      	nop
 80033ca:	e004      	b.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80033cc:	bf00      	nop
 80033ce:	e002      	b.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80033d0:	bf00      	nop
 80033d2:	e000      	b.n	80033d6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80033d4:	bf00      	nop
  }

}
 80033d6:	37e8      	adds	r7, #232	; 0xe8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b92      	ldr	r3, [pc, #584]	; (80036b8 <UART_SetConfig+0x274>)
 8003470:	4013      	ands	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	6979      	ldr	r1, [r7, #20]
 8003478:	430b      	orrs	r3, r1
 800347a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a80      	ldr	r2, [pc, #512]	; (80036bc <UART_SetConfig+0x278>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d120      	bne.n	8003502 <UART_SetConfig+0xbe>
 80034c0:	4b7f      	ldr	r3, [pc, #508]	; (80036c0 <UART_SetConfig+0x27c>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d817      	bhi.n	80034fc <UART_SetConfig+0xb8>
 80034cc:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <UART_SetConfig+0x90>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	080034e5 	.word	0x080034e5
 80034d8:	080034f1 	.word	0x080034f1
 80034dc:	080034f7 	.word	0x080034f7
 80034e0:	080034eb 	.word	0x080034eb
 80034e4:	2301      	movs	r3, #1
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e0b5      	b.n	8003656 <UART_SetConfig+0x212>
 80034ea:	2302      	movs	r3, #2
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e0b2      	b.n	8003656 <UART_SetConfig+0x212>
 80034f0:	2304      	movs	r3, #4
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e0af      	b.n	8003656 <UART_SetConfig+0x212>
 80034f6:	2308      	movs	r3, #8
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e0ac      	b.n	8003656 <UART_SetConfig+0x212>
 80034fc:	2310      	movs	r3, #16
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e0a9      	b.n	8003656 <UART_SetConfig+0x212>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6f      	ldr	r2, [pc, #444]	; (80036c4 <UART_SetConfig+0x280>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d124      	bne.n	8003556 <UART_SetConfig+0x112>
 800350c:	4b6c      	ldr	r3, [pc, #432]	; (80036c0 <UART_SetConfig+0x27c>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003514:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003518:	d011      	beq.n	800353e <UART_SetConfig+0xfa>
 800351a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800351e:	d817      	bhi.n	8003550 <UART_SetConfig+0x10c>
 8003520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003524:	d011      	beq.n	800354a <UART_SetConfig+0x106>
 8003526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800352a:	d811      	bhi.n	8003550 <UART_SetConfig+0x10c>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <UART_SetConfig+0xf4>
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d006      	beq.n	8003544 <UART_SetConfig+0x100>
 8003536:	e00b      	b.n	8003550 <UART_SetConfig+0x10c>
 8003538:	2300      	movs	r3, #0
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	e08b      	b.n	8003656 <UART_SetConfig+0x212>
 800353e:	2302      	movs	r3, #2
 8003540:	77fb      	strb	r3, [r7, #31]
 8003542:	e088      	b.n	8003656 <UART_SetConfig+0x212>
 8003544:	2304      	movs	r3, #4
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e085      	b.n	8003656 <UART_SetConfig+0x212>
 800354a:	2308      	movs	r3, #8
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e082      	b.n	8003656 <UART_SetConfig+0x212>
 8003550:	2310      	movs	r3, #16
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e07f      	b.n	8003656 <UART_SetConfig+0x212>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a5b      	ldr	r2, [pc, #364]	; (80036c8 <UART_SetConfig+0x284>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d124      	bne.n	80035aa <UART_SetConfig+0x166>
 8003560:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <UART_SetConfig+0x27c>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003568:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800356c:	d011      	beq.n	8003592 <UART_SetConfig+0x14e>
 800356e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003572:	d817      	bhi.n	80035a4 <UART_SetConfig+0x160>
 8003574:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003578:	d011      	beq.n	800359e <UART_SetConfig+0x15a>
 800357a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800357e:	d811      	bhi.n	80035a4 <UART_SetConfig+0x160>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <UART_SetConfig+0x148>
 8003584:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003588:	d006      	beq.n	8003598 <UART_SetConfig+0x154>
 800358a:	e00b      	b.n	80035a4 <UART_SetConfig+0x160>
 800358c:	2300      	movs	r3, #0
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e061      	b.n	8003656 <UART_SetConfig+0x212>
 8003592:	2302      	movs	r3, #2
 8003594:	77fb      	strb	r3, [r7, #31]
 8003596:	e05e      	b.n	8003656 <UART_SetConfig+0x212>
 8003598:	2304      	movs	r3, #4
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e05b      	b.n	8003656 <UART_SetConfig+0x212>
 800359e:	2308      	movs	r3, #8
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e058      	b.n	8003656 <UART_SetConfig+0x212>
 80035a4:	2310      	movs	r3, #16
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e055      	b.n	8003656 <UART_SetConfig+0x212>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a47      	ldr	r2, [pc, #284]	; (80036cc <UART_SetConfig+0x288>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d124      	bne.n	80035fe <UART_SetConfig+0x1ba>
 80035b4:	4b42      	ldr	r3, [pc, #264]	; (80036c0 <UART_SetConfig+0x27c>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80035bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035c0:	d011      	beq.n	80035e6 <UART_SetConfig+0x1a2>
 80035c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035c6:	d817      	bhi.n	80035f8 <UART_SetConfig+0x1b4>
 80035c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035cc:	d011      	beq.n	80035f2 <UART_SetConfig+0x1ae>
 80035ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d2:	d811      	bhi.n	80035f8 <UART_SetConfig+0x1b4>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <UART_SetConfig+0x19c>
 80035d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035dc:	d006      	beq.n	80035ec <UART_SetConfig+0x1a8>
 80035de:	e00b      	b.n	80035f8 <UART_SetConfig+0x1b4>
 80035e0:	2300      	movs	r3, #0
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e037      	b.n	8003656 <UART_SetConfig+0x212>
 80035e6:	2302      	movs	r3, #2
 80035e8:	77fb      	strb	r3, [r7, #31]
 80035ea:	e034      	b.n	8003656 <UART_SetConfig+0x212>
 80035ec:	2304      	movs	r3, #4
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e031      	b.n	8003656 <UART_SetConfig+0x212>
 80035f2:	2308      	movs	r3, #8
 80035f4:	77fb      	strb	r3, [r7, #31]
 80035f6:	e02e      	b.n	8003656 <UART_SetConfig+0x212>
 80035f8:	2310      	movs	r3, #16
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e02b      	b.n	8003656 <UART_SetConfig+0x212>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a33      	ldr	r2, [pc, #204]	; (80036d0 <UART_SetConfig+0x28c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d124      	bne.n	8003652 <UART_SetConfig+0x20e>
 8003608:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <UART_SetConfig+0x27c>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003610:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003614:	d011      	beq.n	800363a <UART_SetConfig+0x1f6>
 8003616:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800361a:	d817      	bhi.n	800364c <UART_SetConfig+0x208>
 800361c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003620:	d011      	beq.n	8003646 <UART_SetConfig+0x202>
 8003622:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003626:	d811      	bhi.n	800364c <UART_SetConfig+0x208>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <UART_SetConfig+0x1f0>
 800362c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003630:	d006      	beq.n	8003640 <UART_SetConfig+0x1fc>
 8003632:	e00b      	b.n	800364c <UART_SetConfig+0x208>
 8003634:	2300      	movs	r3, #0
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e00d      	b.n	8003656 <UART_SetConfig+0x212>
 800363a:	2302      	movs	r3, #2
 800363c:	77fb      	strb	r3, [r7, #31]
 800363e:	e00a      	b.n	8003656 <UART_SetConfig+0x212>
 8003640:	2304      	movs	r3, #4
 8003642:	77fb      	strb	r3, [r7, #31]
 8003644:	e007      	b.n	8003656 <UART_SetConfig+0x212>
 8003646:	2308      	movs	r3, #8
 8003648:	77fb      	strb	r3, [r7, #31]
 800364a:	e004      	b.n	8003656 <UART_SetConfig+0x212>
 800364c:	2310      	movs	r3, #16
 800364e:	77fb      	strb	r3, [r7, #31]
 8003650:	e001      	b.n	8003656 <UART_SetConfig+0x212>
 8003652:	2310      	movs	r3, #16
 8003654:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365e:	d16c      	bne.n	800373a <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8003660:	7ffb      	ldrb	r3, [r7, #31]
 8003662:	2b08      	cmp	r3, #8
 8003664:	d838      	bhi.n	80036d8 <UART_SetConfig+0x294>
 8003666:	a201      	add	r2, pc, #4	; (adr r2, 800366c <UART_SetConfig+0x228>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	08003691 	.word	0x08003691
 8003670:	08003699 	.word	0x08003699
 8003674:	080036a1 	.word	0x080036a1
 8003678:	080036d9 	.word	0x080036d9
 800367c:	080036a7 	.word	0x080036a7
 8003680:	080036d9 	.word	0x080036d9
 8003684:	080036d9 	.word	0x080036d9
 8003688:	080036d9 	.word	0x080036d9
 800368c:	080036af 	.word	0x080036af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003690:	f7fe ffa4 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8003694:	61b8      	str	r0, [r7, #24]
        break;
 8003696:	e024      	b.n	80036e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003698:	f7fe ffc2 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 800369c:	61b8      	str	r0, [r7, #24]
        break;
 800369e:	e020      	b.n	80036e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <UART_SetConfig+0x290>)
 80036a2:	61bb      	str	r3, [r7, #24]
        break;
 80036a4:	e01d      	b.n	80036e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a6:	f7fe ff23 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80036aa:	61b8      	str	r0, [r7, #24]
        break;
 80036ac:	e019      	b.n	80036e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036b2:	61bb      	str	r3, [r7, #24]
        break;
 80036b4:	e015      	b.n	80036e2 <UART_SetConfig+0x29e>
 80036b6:	bf00      	nop
 80036b8:	efff69f3 	.word	0xefff69f3
 80036bc:	40013800 	.word	0x40013800
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40004400 	.word	0x40004400
 80036c8:	40004800 	.word	0x40004800
 80036cc:	40004c00 	.word	0x40004c00
 80036d0:	40005000 	.word	0x40005000
 80036d4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	77bb      	strb	r3, [r7, #30]
        break;
 80036e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d075      	beq.n	80037d4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	005a      	lsls	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	441a      	add	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	d916      	bls.n	8003734 <UART_SetConfig+0x2f0>
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370c:	d212      	bcs.n	8003734 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f023 030f 	bic.w	r3, r3, #15
 8003716:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	b29b      	uxth	r3, r3
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	b29a      	uxth	r2, r3
 8003724:	89fb      	ldrh	r3, [r7, #14]
 8003726:	4313      	orrs	r3, r2
 8003728:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	89fa      	ldrh	r2, [r7, #14]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	e04f      	b.n	80037d4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	77bb      	strb	r3, [r7, #30]
 8003738:	e04c      	b.n	80037d4 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800373a:	7ffb      	ldrb	r3, [r7, #31]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d828      	bhi.n	8003792 <UART_SetConfig+0x34e>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <UART_SetConfig+0x304>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	0800376d 	.word	0x0800376d
 800374c:	08003775 	.word	0x08003775
 8003750:	0800377d 	.word	0x0800377d
 8003754:	08003793 	.word	0x08003793
 8003758:	08003783 	.word	0x08003783
 800375c:	08003793 	.word	0x08003793
 8003760:	08003793 	.word	0x08003793
 8003764:	08003793 	.word	0x08003793
 8003768:	0800378b 	.word	0x0800378b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800376c:	f7fe ff36 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8003770:	61b8      	str	r0, [r7, #24]
        break;
 8003772:	e013      	b.n	800379c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003774:	f7fe ff54 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8003778:	61b8      	str	r0, [r7, #24]
        break;
 800377a:	e00f      	b.n	800379c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <UART_SetConfig+0x3a8>)
 800377e:	61bb      	str	r3, [r7, #24]
        break;
 8003780:	e00c      	b.n	800379c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003782:	f7fe feb5 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8003786:	61b8      	str	r0, [r7, #24]
        break;
 8003788:	e008      	b.n	800379c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378e:	61bb      	str	r3, [r7, #24]
        break;
 8003790:	e004      	b.n	800379c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	77bb      	strb	r3, [r7, #30]
        break;
 800379a:	bf00      	nop
    }

    if (pclk != 0U)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d018      	beq.n	80037d4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	085a      	lsrs	r2, r3, #1
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	441a      	add	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b0f      	cmp	r3, #15
 80037bc:	d908      	bls.n	80037d0 <UART_SetConfig+0x38c>
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c4:	d204      	bcs.n	80037d0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	e001      	b.n	80037d4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80037e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	007a1200 	.word	0x007a1200

080037f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01a      	beq.n	8003906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ee:	d10a      	bne.n	8003906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af02      	add	r7, sp, #8
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003944:	f7fc ff32 	bl	80007ac <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d10e      	bne.n	8003976 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f82d 	bl	80039c6 <UART_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e023      	b.n	80039be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d10e      	bne.n	80039a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f817 	bl	80039c6 <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e00d      	b.n	80039be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b09c      	sub	sp, #112	; 0x70
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	4613      	mov	r3, r2
 80039d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d6:	e0a5      	b.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	f000 80a1 	beq.w	8003b24 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7fc fee3 	bl	80007ac <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80039f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d13e      	bne.n	8003a76 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a18:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e6      	bne.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3308      	adds	r3, #8
 8003a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	663b      	str	r3, [r7, #96]	; 0x60
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3308      	adds	r3, #8
 8003a48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e5      	bne.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e067      	b.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d04f      	beq.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a92:	d147      	bne.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003abc:	637b      	str	r3, [r7, #52]	; 0x34
 8003abe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e6      	bne.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3308      	adds	r3, #8
 8003aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003af0:	623a      	str	r2, [r7, #32]
 8003af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	69f9      	ldr	r1, [r7, #28]
 8003af6:	6a3a      	ldr	r2, [r7, #32]
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e5      	bne.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e010      	b.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	f43f af4a 	beq.w	80039d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3770      	adds	r7, #112	; 0x70
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b096      	sub	sp, #88	; 0x58
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2222      	movs	r2, #34	; 0x22
 8003b78:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d02b      	beq.n	8003bda <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	4a40      	ldr	r2, [pc, #256]	; (8003c88 <UART_Start_Receive_DMA+0x138>)
 8003b88:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	4a3f      	ldr	r2, [pc, #252]	; (8003c8c <UART_Start_Receive_DMA+0x13c>)
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a3e      	ldr	r2, [pc, #248]	; (8003c90 <UART_Start_Receive_DMA+0x140>)
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3324      	adds	r3, #36	; 0x24
 8003bac:	4619      	mov	r1, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	f7fc ff5d 	bl	8000a74 <HAL_DMA_Start_IT>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2210      	movs	r2, #16
 8003bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e051      	b.n	8003c7e <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c02:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e6      	bne.n	8003be2 <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3308      	adds	r3, #8
 8003c32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c34:	637a      	str	r2, [r7, #52]	; 0x34
 8003c36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e5      	bne.n	8003c14 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	613b      	str	r3, [r7, #16]
   return(result);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3308      	adds	r3, #8
 8003c66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c68:	623a      	str	r2, [r7, #32]
 8003c6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	69f9      	ldr	r1, [r7, #28]
 8003c6e:	6a3a      	ldr	r2, [r7, #32]
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e5      	bne.n	8003c48 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3758      	adds	r7, #88	; 0x58
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	08003e57 	.word	0x08003e57
 8003c8c:	08003f75 	.word	0x08003f75
 8003c90:	08003fad 	.word	0x08003fad

08003c94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	; 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6979      	ldr	r1, [r7, #20]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e6      	bne.n	8003c9c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003cd4:	bf00      	nop
 8003cd6:	3724      	adds	r7, #36	; 0x24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b095      	sub	sp, #84	; 0x54
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d06:	643b      	str	r3, [r7, #64]	; 0x40
 8003d08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e6      	bne.n	8003ce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3308      	adds	r3, #8
 8003d20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e5      	bne.n	8003d1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d118      	bne.n	8003d88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f023 0310 	bic.w	r3, r3, #16
 8003d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6979      	ldr	r1, [r7, #20]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	613b      	str	r3, [r7, #16]
   return(result);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e6      	bne.n	8003d56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003d9a:	bf00      	nop
 8003d9c:	3754      	adds	r7, #84	; 0x54
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b090      	sub	sp, #64	; 0x40
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d037      	beq.n	8003e2c <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8003dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	623b      	str	r3, [r7, #32]
   return(result);
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3308      	adds	r3, #8
 8003de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de4:	633a      	str	r2, [r7, #48]	; 0x30
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e5      	bne.n	8003dc4 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	69b9      	ldr	r1, [r7, #24]
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	617b      	str	r3, [r7, #20]
   return(result);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e6      	bne.n	8003df8 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e2a:	e002      	b.n	8003e32 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8003e2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e2e:	f7ff fad5 	bl	80033dc <HAL_UART_TxCpltCallback>
}
 8003e32:	bf00      	nop
 8003e34:	3740      	adds	r7, #64	; 0x40
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff fad1 	bl	80033f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b09c      	sub	sp, #112	; 0x70
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d070      	beq.n	8003f4e <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8003e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e92:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e6      	bne.n	8003e74 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	667b      	str	r3, [r7, #100]	; 0x64
 8003ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ec6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ec8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e5      	bne.n	8003ea6 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003efa:	633a      	str	r2, [r7, #48]	; 0x30
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e5      	bne.n	8003eda <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f10:	2220      	movs	r2, #32
 8003f12:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d118      	bne.n	8003f4e <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f023 0310 	bic.w	r3, r3, #16
 8003f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	69b9      	ldr	r1, [r7, #24]
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	617b      	str	r3, [r7, #20]
   return(result);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e6      	bne.n	8003f1c <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d107      	bne.n	8003f66 <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f60:	f7ff fa64 	bl	800342c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f64:	e002      	b.n	8003f6c <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8003f66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f68:	f7fc fa3a 	bl	80003e0 <HAL_UART_RxCpltCallback>
}
 8003f6c:	bf00      	nop
 8003f6e:	3770      	adds	r7, #112	; 0x70
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d109      	bne.n	8003f9e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f90:	085b      	lsrs	r3, r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	4619      	mov	r1, r3
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff fa48 	bl	800342c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f9c:	e002      	b.n	8003fa4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7ff fa30 	bl	8003404 <HAL_UART_RxHalfCpltCallback>
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fbe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b80      	cmp	r3, #128	; 0x80
 8003fd2:	d109      	bne.n	8003fe8 <UART_DMAError+0x3c>
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	2b21      	cmp	r3, #33	; 0x21
 8003fd8:	d106      	bne.n	8003fe8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003fe2:	6978      	ldr	r0, [r7, #20]
 8003fe4:	f7ff fe56 	bl	8003c94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b40      	cmp	r3, #64	; 0x40
 8003ff4:	d109      	bne.n	800400a <UART_DMAError+0x5e>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b22      	cmp	r3, #34	; 0x22
 8003ffa:	d106      	bne.n	800400a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004004:	6978      	ldr	r0, [r7, #20]
 8004006:	f7ff fe6b 	bl	8003ce0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004010:	f043 0210 	orr.w	r2, r3, #16
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800401a:	6978      	ldr	r0, [r7, #20]
 800401c:	f7ff f9fc 	bl	8003418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004020:	bf00      	nop
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f7ff f9e6 	bl	8003418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800404c:	bf00      	nop
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	60bb      	str	r3, [r7, #8]
   return(result);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	6979      	ldr	r1, [r7, #20]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	613b      	str	r3, [r7, #16]
   return(result);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e6      	bne.n	800405c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff f99e 	bl	80033dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a0:	bf00      	nop
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <__libc_init_array>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	4d0d      	ldr	r5, [pc, #52]	; (80040f4 <__libc_init_array+0x38>)
 80040c0:	4c0d      	ldr	r4, [pc, #52]	; (80040f8 <__libc_init_array+0x3c>)
 80040c2:	1b64      	subs	r4, r4, r5
 80040c4:	10a4      	asrs	r4, r4, #2
 80040c6:	2600      	movs	r6, #0
 80040c8:	42a6      	cmp	r6, r4
 80040ca:	d109      	bne.n	80040e0 <__libc_init_array+0x24>
 80040cc:	4d0b      	ldr	r5, [pc, #44]	; (80040fc <__libc_init_array+0x40>)
 80040ce:	4c0c      	ldr	r4, [pc, #48]	; (8004100 <__libc_init_array+0x44>)
 80040d0:	f000 f820 	bl	8004114 <_init>
 80040d4:	1b64      	subs	r4, r4, r5
 80040d6:	10a4      	asrs	r4, r4, #2
 80040d8:	2600      	movs	r6, #0
 80040da:	42a6      	cmp	r6, r4
 80040dc:	d105      	bne.n	80040ea <__libc_init_array+0x2e>
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e4:	4798      	blx	r3
 80040e6:	3601      	adds	r6, #1
 80040e8:	e7ee      	b.n	80040c8 <__libc_init_array+0xc>
 80040ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ee:	4798      	blx	r3
 80040f0:	3601      	adds	r6, #1
 80040f2:	e7f2      	b.n	80040da <__libc_init_array+0x1e>
 80040f4:	0800416c 	.word	0x0800416c
 80040f8:	0800416c 	.word	0x0800416c
 80040fc:	0800416c 	.word	0x0800416c
 8004100:	08004170 	.word	0x08004170

08004104 <memset>:
 8004104:	4402      	add	r2, r0
 8004106:	4603      	mov	r3, r0
 8004108:	4293      	cmp	r3, r2
 800410a:	d100      	bne.n	800410e <memset+0xa>
 800410c:	4770      	bx	lr
 800410e:	f803 1b01 	strb.w	r1, [r3], #1
 8004112:	e7f9      	b.n	8004108 <memset+0x4>

08004114 <_init>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	bf00      	nop
 8004118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411a:	bc08      	pop	{r3}
 800411c:	469e      	mov	lr, r3
 800411e:	4770      	bx	lr

08004120 <_fini>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	bf00      	nop
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr
